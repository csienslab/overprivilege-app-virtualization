import json
import glob
import csv
import sys


def process_labels(policy, path):
    label_local = dict()
    labels_lst = glob.glob(path+"\\*")
    if policy == 'filter_normal':
        n_tag = "filter_normal_self"
        d_tag = "Dangerous"
    elif policy == 'filter_normal_strict':
        n_tag = "filter_normal_self_strict"
        d_tag = "Dangerous"
    elif policy == 'add_request':
        n_tag = "filter_normal_self"
        d_tag = "add_dangerous_request"
    else:
        n_tag = "Normal"
        d_tag = "add_dangerous_request"

    for label in labels_lst:
        pkg = label.split("\\")[-1].split("_")[0]
        type_name = label.split("\\")[-2] #.split("_")[0]
        with open(label) as d:
            dictData = json.load(d)
            if pkg not in label_local:
                # If no pkg labels in the global label_all dict, initialize the pkg dict first.
                label_local[pkg] = dict()
                label_local[pkg]["Type"] = type_name
                label_local[pkg]["Declared"] = dict()
                label_local[pkg]["Droidbot-obtained"] = dict()
                label_local[pkg]["Declared"]["Normal"] = dictData["Declared"]["Normal"]
                label_local[pkg]["Declared"]["Dangerous"] = dictData["Declared"]["Dangerous"]
                label_local[pkg]["Droidbot-obtained"]["Normal"] = {0: [], 1: []}
                label_local[pkg]["Droidbot-obtained"]["Dangerous"] = {0: [], 1: [], 2: [], 3: []}
            for perm in dictData["Droidbot-obtained"][n_tag]:
                # Iterate through all of the permission items in the current label.json
                cur_label = dictData["Droidbot-obtained"][n_tag][perm]
                for label, label_lst in label_local[pkg]["Droidbot-obtained"]["Normal"].items():
                    if perm in label_lst:
                        # If we can find the perm already in one of the label_lst
                        # Compare the current label with the previous label, and retain the larger one
                        if cur_label > label:
                            label_local[pkg]["Droidbot-obtained"]["Normal"][label].remove(perm)
                            label_local[pkg]["Droidbot-obtained"]["Normal"][cur_label].append(perm)
                            print('different label', perm, label, cur_label)
                        # Because one perm only maps to one label for the current label.json
                        # If the perm is already mapped to one list and processed,
                        # we use break to prevent reaching the else block for the for loop
                        break
                else:
                    # While iterating through all of the global data and not found the already existed label,
                    # add the current label to the global data
                    label_local[pkg]["Droidbot-obtained"]["Normal"][cur_label].append(perm)

            for perm in dictData["Droidbot-obtained"][d_tag]:
                cur_label = dictData["Droidbot-obtained"][d_tag][perm]
                for label, label_lst in label_local[pkg]["Droidbot-obtained"]["Dangerous"].items():
                    if perm in label_lst:
                        if cur_label > label:
                            label_local[pkg]["Droidbot-obtained"]["Dangerous"][label].remove(perm)
                            label_local[pkg]["Droidbot-obtained"]["Dangerous"][cur_label].append(perm)
                            print('different label', perm, label, cur_label)
                        break
                else:
                    label_local[pkg]["Droidbot-obtained"]["Dangerous"][cur_label].append(perm)
    return label_local


def find_ver(typ, sha):
    with open('versions\\'+typ+'.json') as v:
        version_dic = json.load(v)
    if sha.upper() in version_dic:
        min_v, tar_v = version_dic[sha.upper()]
    else:
        min_v, tar_v = -1, -1
    return min_v, tar_v


def writetocsv(label_all, save, pre_save):
    perm_cal = dict()
    perm_cal["API>=23"] = dict()
    perm_cal["API>=23"]["Abnormal Install-time"] = dict()
    perm_cal["API>=23"]["Abnormal Install-time"][1] = dict()
    perm_cal["API>=23"]["Abnormal Runtime"] = dict()
    perm_cal["API>=23"]["Abnormal Runtime"][1] = dict()
    perm_cal["API>=23"]["Abnormal Runtime"][2] = dict()
    perm_cal["API>=23"]["Abnormal Runtime"][3] = dict()
    perm_cal["API<23"] = dict()
    perm_cal["API<23"]["Abnormal Install-time"] = dict()
    perm_cal["API<23"]["Abnormal Install-time"][1] = dict()
    perm_cal["API<23"]["Abnormal Runtime"] = dict()
    perm_cal["API<23"]["Abnormal Runtime"][1] = dict()
    perm_cal["API<23"]["Abnormal Runtime"][2] = dict()
    perm_cal["API<23"]["Abnormal Runtime"][3] = dict()

    with open(save, 'w', newline='', encoding='UTF8') as f:
        with open(pre_save, 'w', newline='', encoding='UTF8') as f_pre:
            # create the csv writer
            writer = csv.writer(f)
            writer_pre = csv.writer(f_pre)
            header = ['Malware Type', 'SHA256', 'Declared Install-time', 'Declared Runtime',
                      'Droidbot Install-time', 'Droidbot Runtime', '(0) Install-time Labels', '(1) Install-time Labels',
                      '(0) Runtime Labels', '(1) Runtime Labels', '(2) Runtime Labels', '(3) Runtime Labels', '(1) Install-time Labels',
                      '(1) Runtime Labels', '(2) Runtime Labels', '(3) Runtime Labels', 'MinVersion', 'TargetVersion']
            writer.writerow(header)
            writer_pre.writerow(header)

            # write rows to the csv file
            for pkg in label_all:
                print(pkg)
                print(label_all[pkg])
                # Each version is documented in a json file for each type of malware.
                malware_type = label_all[pkg]["Type"]
                if len(label_all[pkg]["Declared"]["Normal"]) != 0:
                    declared_normal = label_all[pkg]["Declared"]["Normal"][0]
                else:
                    declared_normal = 0
                if len(label_all[pkg]["Declared"]["Dangerous"]) != 0:
                    declared_dangerous = label_all[pkg]["Declared"]["Dangerous"][0]
                else:
                    declared_dangerous = 0

                droid_normal = sum([len(i) for i in label_all[pkg]["Droidbot-obtained"]["Normal"].values()])
                droid_dangerous = sum([len(i) for i in label_all[pkg]["Droidbot-obtained"]["Dangerous"].values()])

                normal_0 = len(label_all[pkg]["Droidbot-obtained"]["Normal"][0])
                normal_1 = len(label_all[pkg]["Droidbot-obtained"]["Normal"][1])
                # Generate the normal permission list labeled 1 (For clearer demonstration,
                # we filter out 'android.permission' in the permission name.)
                # The process is the same to the abnormal labels in the following dangerous permissions.
                normal_1_lst = [i.split('.')[-1] if i.startswith('android.permission') else i for i in
                                label_all[pkg]["Droidbot-obtained"]["Normal"][1]] if normal_1 > 0 else ''

                dangerous_0 = len(label_all[pkg]["Droidbot-obtained"]["Dangerous"][0])

                dangerous_1 = len(label_all[pkg]["Droidbot-obtained"]["Dangerous"][1])
                dangerous_1_lst = [i.split('.')[-1] if i.startswith('android.permission') else i for i in
                                   label_all[pkg]["Droidbot-obtained"]["Dangerous"][1]] if dangerous_1 > 0 else ''

                dangerous_2 = len(label_all[pkg]["Droidbot-obtained"]["Dangerous"][2])
                dangerous_2_lst = [i.split('.')[-1] if i.startswith('android.permission') else i for i in
                                   label_all[pkg]["Droidbot-obtained"]["Dangerous"][2]] if dangerous_2 > 0 else ''

                dangerous_3 = len(label_all[pkg]["Droidbot-obtained"]["Dangerous"][3])
                dangerous_3_lst = [i.split('.')[-1] if i.startswith('android.permission') else i for i in
                                   label_all[pkg]["Droidbot-obtained"]["Dangerous"][3]] if dangerous_3 > 0 else ''

                min_ver, target_ver = find_ver(malware_type, pkg)

                row = [malware_type, pkg, declared_normal, declared_dangerous, droid_normal, droid_dangerous, normal_0,
                       normal_1, dangerous_0, dangerous_1, dangerous_2, dangerous_3, normal_1_lst,
                       dangerous_1_lst, dangerous_2_lst, dangerous_3_lst, min_ver, target_ver]

                if target_ver is not None:
                    if int(target_ver) >= 23:
                        ver = "API>=23"
                        writer.writerow(row)
                    else:
                        ver = "API<23"
                        writer_pre.writerow(row)
                else:
                    ver = "API<23"
                    writer_pre.writerow(row)

                # The following code is to generate the statistics of abnormal permissions
                # to the output file abnormal_perms_[policy].json
                # abnormal_perm_runtime = list(dangerous_1_lst) + list(dangerous_2_lst) + list(dangerous_3_lst)
                for ab_perm in normal_1_lst:
                    if ab_perm in perm_cal[ver]["Abnormal Install-time"][1]:
                        perm_cal[ver]["Abnormal Install-time"][1][ab_perm] += 1
                    else:
                        perm_cal[ver]["Abnormal Install-time"][1][ab_perm] = 1
                for ab_perm in dangerous_1_lst:
                    if ab_perm in perm_cal[ver]["Abnormal Runtime"][1]:
                        perm_cal[ver]["Abnormal Runtime"][1][ab_perm] += 1
                    else:
                        perm_cal[ver]["Abnormal Runtime"][1][ab_perm] = 1
                for ab_perm in dangerous_2_lst:
                    if ab_perm in perm_cal[ver]["Abnormal Runtime"][2]:
                        perm_cal[ver]["Abnormal Runtime"][2][ab_perm] += 1
                    else:
                        perm_cal[ver]["Abnormal Runtime"][2][ab_perm] = 1
                for ab_perm in dangerous_3_lst:
                    if ab_perm in perm_cal[ver]["Abnormal Runtime"][3]:
                        perm_cal[ver]["Abnormal Runtime"][3][ab_perm] += 1
                    else:
                        perm_cal[ver]["Abnormal Runtime"][3][ab_perm] = 1

    return perm_cal


if __name__ == '__main__':
    if len(sys.argv) < 2:
        policy = 'all'
    else:
        # policy: default, filter_normal, filter_normal_strict, add_request
        policy = sys.argv[1]
    if policy == 'all':
        policies = ["default", "filter_normal", "add_request"]
        for pol in policies:
            labels_global = dict()
            for i in glob.glob("labels/*"):
                labels = process_labels(pol, i)
                labels_global.update(labels)
            save_csv_path = "outputs/res_%s.csv" % pol
            pre_csv_path = "outputs/res_pre_%s.csv" % pol
            save_json_path = "outputs/abnormal_perms_%s.json" % pol
            perm_cals = writetocsv(labels_global, save_csv_path, pre_csv_path)
            with open(save_json_path, 'w') as saved_ab_perms:
                json.dump(perm_cals, saved_ab_perms, indent=4)
    else:
        labels_global = dict()
        for i in glob.glob("labels/*"):
            labels = process_labels(policy, i)
            labels_global.update(labels)
        save_csv_path = "outputs/res_%s.csv" % policy
        pre_csv_path = "outputs/res_pre_%s.csv" % policy
        save_json_path = "outputs/abnormal_perms_%s.json" % policy
        perm_cals = writetocsv(labels_global, save_csv_path, pre_csv_path)
        with open(save_json_path, 'w') as saved_ab_perms:
            json.dump(perm_cals, saved_ab_perms, indent=4)


